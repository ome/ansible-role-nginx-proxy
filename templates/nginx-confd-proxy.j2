server {
{% if (site.nginx_proxy_listen_http | default(nginx_proxy_listen_http)) %}
    listen       {{ site.nginx_proxy_listen_http | default(nginx_proxy_listen_http) }}
{%   if (site.nginx_proxy_is_default | default(False)) %}
      default_server
{%   endif %};
{% endif %}

{% if (site.nginx_proxy_ssl | default(nginx_proxy_ssl)) and (site.nginx_proxy_force_ssl | default(nginx_proxy_force_ssl)) %}
    server_name  {{ site.nginx_proxy_server_name | default(nginx_proxy_server_name) }};
    # Redirect all http to https
    return 301 https://$host$request_uri;
}

server {
{% endif %}

{% if (site.nginx_proxy_ssl | default(nginx_proxy_ssl)) %}
    listen       443 ssl
{%   if (site.nginx_proxy_http2 | default(nginx_proxy_http2)) %}
      http2
{%   endif %}
{%   if (site.nginx_proxy_is_default | default(False)) %}
      default_server
{%   endif %};
{%   if (site.nginx_proxy_hsts_age | default(nginx_proxy_hsts_age)) %}
    add_header Strict-Transport-Security "max-age={{ site.nginx_proxy_hsts_age | default(nginx_proxy_hsts_age) }}";
{%   endif %}
{% endif %}
{% if (site.nginx_proxy_cachebuster_enabled | default(nginx_proxy_cachebuster_enabled)) and nginx_proxy_cachebuster_port %}
    listen       {{ nginx_proxy_cachebuster_port }};
{% endif %}
    server_name  {{ site.nginx_proxy_server_name | default(nginx_proxy_server_name) }};

{% if (site.nginx_proxy_ssl | default(nginx_proxy_ssl)) %}
    ssl_certificate {{ site.nginx_proxy_ssl_certificate | default(nginx_proxy_ssl_certificate) }};
    ssl_certificate_key {{ site.nginx_proxy_ssl_certificate_key | default(nginx_proxy_ssl_certificate_key) }};
    ssl_protocols  TLSv1.2 TLSv1.3;  # don't use SSLv3 ref: POODLE
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;

{% endif %}

    #charset koi8-r;
    #access_log  /var/log/nginx/log/host.access.log  main;

{%   if (site.nginx_proxy_404 | default(nginx_proxy_404)) %}
    error_page  404              {{ site.nginx_proxy_404 | default(nginx_proxy_404) }};
{%   endif %}

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

{% for item in (site.nginx_proxy_block_locations | default(nginx_proxy_block_locations)) %}
    location {{ item }} {
        return 404;
    }
{% endfor %}

{% if (site.nginx_dynamic_proxy_resolvers | default(nginx_dynamic_proxy_resolvers)) %}
    # Nginx requires explicit DNS servers
    resolver {{ site.nginx_dynamic_proxy_resolvers | default(nginx_dynamic_proxy_resolvers) }};
{% endif %}

{% if (site.nginx_proxy_buffers | default(nginx_proxy_buffers)) %}
    # Proxy buffers
    proxy_buffers {{ site.nginx_proxy_buffers | default(nginx_proxy_buffers) }};
{% endif %}

    # Common proxy headers
    proxy_set_header Host {{ site.nginx_proxy_set_header_host | default(nginx_proxy_set_header_host) }};
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
{% if (site.nginx_proxy_forward_scheme_header | default(nginx_proxy_forward_scheme_header)) %}
    proxy_set_header {{ site.nginx_proxy_forward_scheme_header | default(nginx_proxy_forward_scheme_header) }} $scheme;
{% endif %}

    port_in_redirect off;

{% for item in (site.nginx_proxy_redirect_map_locations | default(nginx_proxy_redirect_map_locations)) %}
    location {{ item.location }} {
        return {{ item.code | default('302') }} $redirect_uri;
    }
{% endfor %}

{% for item in (site.nginx_proxy_direct_locations | default(nginx_proxy_direct_locations)) %}
    location {{ item.location }} {
{%   if 'redirect301' in item %}
        return 301 {{ item.redirect301 }};
{%   endif %}
{%   if 'redirect302' in item %}
        return 302 {{ item.redirect302 }};
{%   endif %}
{%   if 'index' in item %}
        index {{ item.index }};
{%   endif %}
{%   if 'root' in item %}
        root {{ item.root }};
{%   endif %}
{%   if 'alias' in item %}
        alias {{ item.alias }};
{%   endif %}
{%   for custom in (item.custom | default([])) %}
        {{ custom }};
{%   endfor %}
    }
{% endfor %}

{% for item in (site.nginx_proxy_backends | default(nginx_proxy_backends)) %}
    location {{ item.location }} {
{%   if item.websockets | default(False) %}
{%     if item.websocketsonly | default(False) %}
        if ($http_upgrade !~* websocket) {
            return 400;
        }
{%     endif %}
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
{%   endif %}

{%   if item.dynamic | default(False) %}
        # To force dynamic DNS lookups need to use a variable
        set $backend_{{ item.name }} "{{ item.server }}";
{%     if item.limit_methods | default('') | length > 0 %}
        limit_except {{ item.limit_methods }} {
            deny all;
        }
{%     endif %}
        proxy_pass $backend_{{ item.name }};
        proxy_redirect $backend_{{ item.name }} $scheme://$server_name;
{%   else %}
{%     if item.limit_methods | default('') | length > 0 %}
        limit_except {{ item.limit_methods }} {
            deny all;
        }
{%     endif %}
        proxy_pass {{ item.server }};
        proxy_redirect {{ item.server }} $scheme://$server_name;
{%   endif %}

{%   if item.cache_validity | default(False) %}
        proxy_cache            $cache_zone_name;
{%     if nginx_proxy_cache_key %}
        proxy_cache_key        $cache_key;
{%     endif %}
        proxy_cache_valid      200 {{ item.cache_validity }};
        proxy_cache_methods    GET HEAD; # Only GET and HEAD methods apply
{%     if nginx_proxy_cache_use_stale %}
        proxy_cache_use_stale  {{ nginx_proxy_cache_use_stale }};
        proxy_cache_background_update on;
{%     endif %}
        proxy_cache_bypass     $cache_refresh;
        proxy_no_cache         $skip_cache;

{%     if nginx_proxy_debug_cache_headers %}
        add_header             X-Proxy-Cache $upstream_cache_status;
        add_header             X-Proxy-Cache-Skip $skip_cache;
        add_header             X-Proxy-Cache-Zone $cache_zone_name;
{%       if nginx_proxy_cache_key %}
        add_header             X-Proxy-Cache-Key $cache_key;
{%       endif %}
{%     endif %}

{%     if nginx_proxy_cache_lock_time %}
        proxy_cache_lock          on;
        proxy_cache_lock_age      {{ nginx_proxy_cache_lock_time }};
        proxy_cache_lock_timeout  {{ nginx_proxy_cache_lock_time }};
{%     endif %}

{%     if nginx_proxy_cache_ignore_headers %}
        proxy_ignore_headers   {{ nginx_proxy_cache_ignore_headers }};
{%     endif %}
{%     for item in nginx_proxy_cache_hide_headers %}
        proxy_hide_header {{ item }};
{%     endfor %}
{%   endif %}

{%   if 'read_timeout' in item %}
        proxy_read_timeout {{ item.read_timeout }};
{%   endif %}

{%   if 'host_header' in item %}
        proxy_set_header Host {{ item.host_header }};
{%   endif %}

{%   if 'maintenance_flag' in item %}
        if (-f {{ item.maintenance_flag }}) {
            return 503;
        }
        error_page 503 {{ item.maintenance_uri }};
{%   endif %}

{%   for directive in (item.additional | default([])) %}
    {{ directive }}{% if directive[-1] != '}' %};{% endif %}
{% endfor %}

    }

{% endfor %}

{% for item in (site.nginx_proxy_additional_directives | default(nginx_proxy_additional_directives)) %}
    {{ item }}{% if item[-1] != '}' %};{% endif %}

{% endfor %}

}
